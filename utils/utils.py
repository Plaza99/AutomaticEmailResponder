from googleapiclient.discovery import build
from openai import OpenAI
from email.message import EmailMessage
import base64
       
# Create a message object with the most important fields
def create_msg_obj(msg):
    
    obj = {}
    obj['threadId'] = msg['threadId']
    obj['snippet'] = msg['snippet']
    obj['id'] = msg['id']
    for elem in msg['payload']['headers']:
        if(elem["name"] in ['To', 'From', 'Subject']):
            obj[elem["name"]] = elem["value"]
            print(elem["name"],": ", elem["value"])        
    return obj


# Mark message as readed by changing the label
def mark_as_readed(msg_id, creds):
    
    try:
        service = build("gmail", "v1", credentials=creds)
        service.users().messages().modify(userId="me", id=msg_id, body={'removeLabelIds':["UNREAD"]}).execute()
        print("Message [",msg_id,"] labeled as readed")
        
    except Exception as e:
        print("Impossible to mark message [",msg_id,"] - e:",e)


# Create a draft message with the reply
def create_response(msg, reply, creds):
    
    end = "\n\nAutomatic reply generated by OpenAI's ChatGPT through the 'Automatic Email Responder' application."
    try:
        message = EmailMessage()
        message.set_content(reply + end)
        message["To"] = msg['To']
        message["From"] = msg['From']
        message["Subject"] = "RE:"+ msg['Subject']
        draft_obj = {
            "message":{
                'raw': base64.urlsafe_b64encode(message.as_string().encode()).decode(),
                'threadId': msg['threadId']
            }
        }
    
        service = build("gmail", "v1", credentials=creds)
        draft = service.users().drafts().create(userId="me", body=draft_obj).execute()
        if(draft):
            print("Draft message correctly created")
        
        
    except Exception as e:
        print("Impossible to create draft message - e:",e)


# Generate a response with OpenAI
def generate_response(question, prompt):    
    client = OpenAI()
    response = client.chat.completions.create(
      model="gpt-3.5-turbo",
      messages=[
        {"role": "assistant", "content": prompt},
        {"role": "user", "content": question}
      ]
    )
    return response.choices[0].message.content


